---
import { ViewTransitions } from 'astro:transitions';
import BaseHead, { type Props as HeadProps } from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import Nav from '../components/Nav.astro';

export type Props = HeadProps & { showHeader?: boolean };

const { showHeader = true, ...head } = Astro.props;
---

<!doctype html>
<html lang="zh" class="antialiased break-words">
    <head>
        <BaseHead {...head} />
        <script>
            if (localStorage.theme === 'dark') {
                document.documentElement.classList.add('dark');
            }
        </script>
        <script>
            // Source: https://github.com/JuanM04/portfolio/blob/983b0ed0eabdac37bf8b7912d3e8128a443192b9/src/pages/docs/%5B...documentSlug%5D.astro#L74-L103
            // From this comment: https://github.com/withastro/astro/issues/4433#issuecomment-1584019991
            /**
             * @params {HTMLCollectionOf<HTMLElement>} graphs
             */
            async function renderDiagrams(graphs) {
                const { default: mermaid } = await import('mermaid');
                mermaid.initialize({
                    startOnLoad: false,
                    fontFamily: 'var(--sans-font)',
                    // @ts-ignore This works, but TS expects a enum for some reason
                    theme: window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'default'
                });

                for (const graph of graphs) {
                    const content = graph.querySelector('.mermaid-src').innerText;
                    if (!content) continue;
                    let svg = document.createElement('svg');
                    const id = (svg.id = 'mermaid-' + Math.round(Math.random() * 100000));
                    graph.appendChild(svg);
                    mermaid.render(id, content).then((result) => {
                        graph.innerHTML = result.svg;
                    });
                }
            }

            const graphs = document.getElementsByClassName('mermaid');
            if (document.getElementsByClassName('mermaid').length > 0) {
                renderDiagrams(graphs);
            }
        </script>
        <script>
            // Source: https://github.com/JuanM04/portfolio/blob/983b0ed0eabdac37bf8b7912d3e8128a443192b9/src/pages/docs/%5B...documentSlug%5D.astro#L74-L103
            // From this comment: https://github.com/withastro/astro/issues/4433#issuecomment-1584019991
            /**
             * @params {HTMLCollectionOf<HTMLElement>} graphs
             */
            async function renderDiagrams(graphs) {
                const { default: mermaid } = await import('mermaid');
                mermaid.initialize({
                    startOnLoad: false,
                    fontFamily: 'var(--sans-font)',
                    // @ts-ignore This works, but TS expects a enum for some reason
                    theme: window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'default'
                });

                for (const graph of graphs) {
                    const content = graph.querySelector('.mermaid-src').innerText;
                    if (!content) continue;
                    let svg = document.createElement('svg');
                    const id = (svg.id = 'mermaid-' + Math.round(Math.random() * 100000));
                    graph.appendChild(svg);
                    mermaid.render(id, content).then((result) => {
                        graph.innerHTML = result.svg;
                    });
                }
            }

            const graphs = document.getElementsByClassName('mermaid');
            if (document.getElementsByClassName('mermaid').length > 0) {
                renderDiagrams(graphs);
            }
        </script>
        <ViewTransitions />
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/FutabaTsukushi/PingFang_SC_webfont_splited/PingFang_SC_Medium/result.css" />
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/FutabaTsukushi/PingFang_SC_webfont_splited/PingFang_SC_Bold/result.css" />
    </head>
    <body class="bg-main text-main">
        <div class="flex flex-col min-h-screen px-4 md:px-8">
            <Nav />
            {showHeader && <Header />}
            <main class="grow w-full max-w-3xl mx-auto">
                <slot />
            </main>
            <Footer />
        </div>
    </body>
</html>
